------------------------------------------
CodeLine 0
PC: 0
A\R\E: A
Original Line Of Code: .start,altest01,0
Line Comment: 
Line Length: 0
Error Count: 0
Errors:
Directive Name: .START
Directive Label: NOLABEL
Directive Code Location: START
Operands: 
Operand Types: 

------------------------------------------
CodeLine 1
PC: 0
A\R\E: A
Original Line Of Code: .text
Line Comment: 
Line Length: 0
Error Count: 0
Errors:
Directive Name: .TEXT
Directive Label: NOLABEL
Directive Code Location: TEXT
Operands: 
Operand Types: 

------------------------------------------
CodeLine 2
PC: 0
A\R\E: A
Original Line Of Code: 	EXT          DQ
Line Comment: 
Line Length: 0
Error Count: 1
Errors:
	19	The operand 0: DQ did not match the operand type NUMBER.	Change Operand
Directive Name: EXT
Directive Label: NOLABEL
Directive Code Location: INFO
Operands: 
	DQ
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 3
PC: 8
A\R\E: A
Original Line Of Code: 	Reset.lc    8
Line Comment: 
Line Length: 0
Error Count: 0
Errors:
Directive Name: RESET.LC
Directive Label: OPTIONALLABEL
Directive Code Location: TEXT
Operands: 
	8
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 4
PC: 8
A\R\E: A
Original Line Of Code: P1	ClR    $1,$15	| clear registers 1 to 15
Line Comment: | clear registers 1 to 15
Line Length: 0
Error Count: 1
Errors:
	99	General Error	Check this line for syntax errors.
------------------------------------------
CodeLine 5
PC: 9
A\R\E: R
Original Line Of Code: P2	inn    1,XX($1)	| READ NEXT XX from keyboard
Line Comment: | READ NEXT XX from keyboard
Line Length: 1
Error Count: 0
Errors:
Instruction: INN
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	1
	XX($1)
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 6
PC: 10
A\R\E: R
Original Line Of Code: 	Outn   1,XX($1)	| ECHO XX to the display
Line Comment: | ECHO XX to the display
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTN
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	1
	XX($1)
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 7
PC: 11
A\R\E: R
Original Line Of Code: 	Inn    1,YY($1)	| READ IN NEXT YY from keyboard
Line Comment: | READ IN NEXT YY from keyboard
Line Length: 1
Error Count: 0
Errors:
Instruction: INN
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	1
	YY($1)
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 8
PC: 12
A\R\E: R
Original Line Of Code: 	Outn   1,YY($1)	| ECHO YY to the display
Line Comment: | ECHO YY to the display
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTN
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	1
	YY($1)
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 9
PC: 13
A\R\E: R
Original Line Of Code: 	Lw     $2,XX($1) | Begin to FORM XX/YY
Line Comment: | Begin to FORM XX/YY
Line Length: 1
Error Count: 0
Errors:
Instruction: LW
Instruction Type: S
Instruction Binary: 110000
Instruction Hex: 30
Operands: 
	$2
	XX($1)
Operand Types: 
	REGISTER
	COMPLEXADDRESS

------------------------------------------
CodeLine 10
PC: 14
A\R\E: R
Original Line Of Code: 	Lw     $3,YY($1)
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Instruction: LW
Instruction Type: S
Instruction Binary: 110000
Instruction Hex: 30
Operands: 
	$3
	YY($1)
Operand Types: 
	REGISTER
	COMPLEXADDRESS

------------------------------------------
CodeLine 11
PC: 15
A\R\E: R
Original Line Of Code: 	JEQ    $3,$0,ER	| IF DIVIDE BY 0, GO PRT MSG AND HALT
Line Comment: | IF DIVIDE BY 0, GO PRT MSG AND HALT
Line Length: 1
Error Count: 0
Errors:
Instruction: JEQ
Instruction Type: S
Instruction Binary: 100000
Instruction Hex: 20
Operands: 
	$3
	$0
	ER
Operand Types: 
	REGISTER
	REGISTER
	ADDRESS

------------------------------------------
CodeLine 12
PC: 16
A\R\E: A
Original Line Of Code: 	DIV    $2,$2,$3	| OTHERWISE  DIVIDE
Line Comment: | OTHERWISE  DIVIDE
Line Length: 1
Error Count: 0
Errors:
Instruction: DIV
Instruction Type: R
Instruction Binary: 1
Instruction Hex: 01
Operands: 
	$2
	$2
	$3
Operand Types: 
	REGISTER
	REGISTER
	REGISTER

------------------------------------------
CodeLine 13
PC: 17
A\R\E: R
Original Line Of Code: 	SW     $2,QQ($1) | STORE RESULT
Line Comment: | STORE RESULT
Line Length: 1
Error Count: 0
Errors:
Instruction: SW
Instruction Type: S
Instruction Binary: 100111
Instruction Hex: 27
Operands: 
	$2
	QQ($1)
Operand Types: 
	REGISTER
	COMPLEXADDRESS

------------------------------------------
CodeLine 14
PC: 18
A\R\E: A
Original Line Of Code: 	ADD    $10,$10,$2 | ADD QUOTIENT TO SUM REGISTER
Line Comment: | ADD QUOTIENT TO SUM REGISTER
Line Length: 1
Error Count: 2
Errors:
	19	Operand [0]: $10 is not a valid REGISTER.	Change Operand
	19	Operand [1]: $10 is not a valid REGISTER.	Change Operand
Instruction: ADD
Instruction Type: R
Instruction Binary: 1
Instruction Hex: 01
Operands: 
	$10
	$10
	$2
Operand Types: 
	REGISTER
	REGISTER
	REGISTER

------------------------------------------
CodeLine 15
PC: 18
A\R\E: A
Original Line Of Code: 	ADDi   $1,1	| INCREMENT INDEX REGISTER
Line Comment: | INCREMENT INDEX REGISTER
Line Length: 0
Error Count: 2
Errors:
	0	Expected 3 operands and received 2 operands.	Add or Remove Operands accordingly.
	99	General Error	Check this line for syntax errors.
------------------------------------------
CodeLine 16
PC: 19
A\R\E: A
Original Line Of Code: 	ADD    $2,$1,$0 | TEST IF 4 TIME THROUGH THE LOOP
Line Comment: | TEST IF 4 TIME THROUGH THE LOOP
Line Length: 1
Error Count: 0
Errors:
Instruction: ADD
Instruction Type: R
Instruction Binary: 1
Instruction Hex: 01
Operands: 
	$2
	$1
	$0
Operand Types: 
	REGISTER
	REGISTER
	REGISTER

------------------------------------------
CodeLine 17
PC: 19
A\R\E: A
Original Line Of Code: 	SUBi   $2,4
Line Comment: 
Line Length: 0
Error Count: 2
Errors:
	0	Expected 3 operands and received 2 operands.	Add or Remove Operands accordingly.
	99	General Error	Check this line for syntax errors.
------------------------------------------
CodeLine 18
PC: 20
A\R\E: R
Original Line Of Code: 	JEQ    $2,$0,P2	| IF NOT DONE, LOOP BACK
Line Comment: | IF NOT DONE, LOOP BACK
Line Length: 1
Error Count: 0
Errors:
Instruction: JEQ
Instruction Type: S
Instruction Binary: 100000
Instruction Hex: 20
Operands: 
	$2
	$0
	P2
Operand Types: 
	REGISTER
	REGISTER
	ADDRESS

------------------------------------------
CodeLine 19
PC: 21
A\R\E: A
Original Line Of Code: 	Sw     $10,Q1	| IF DONE, STORE AND PRINT RESULT
Line Comment: | IF DONE, STORE AND PRINT RESULT
Line Length: 1
Error Count: 1
Errors:
	19	Operand [0]: $10 is not a valid REGISTER.	Change Operand
Instruction: SW
Instruction Type: S
Instruction Binary: 100111
Instruction Hex: 27
Operands: 
	$10
	Q1
Operand Types: 
	REGISTER
	COMPLEXADDRESS

------------------------------------------
CodeLine 20
PC: 22
A\R\E: R
Original Line Of Code: 	outc   2,M1	| Output 2 words
Line Comment: | Output 2 words
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTC
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	2
	M1
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 21
PC: 23
A\R\E: R
Original Line Of Code: 	outc   1,Q1
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTC
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	1
	Q1
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 22
PC: 24
A\R\E: R
Original Line Of Code: 	J      E1	| THEN GO TO THE EXIT ROUTINE
Line Comment: | THEN GO TO THE EXIT ROUTINE
Line Length: 1
Error Count: 0
Errors:
Instruction: J
Instruction Type: S
Instruction Binary: 110
Instruction Hex: 06
Operands: 
	E1
Operand Types: 
	COMPLEXADDRESS

------------------------------------------
CodeLine 23
PC: 25
A\R\E: R
Original Line Of Code: ER	outc   2,ME	| ZERO DIVISOR, PRINT Y IS 0
Line Comment: | ZERO DIVISOR, PRINT Y IS 0
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTC
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	2
	ME
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 24
PC: 26
A\R\E: A
Original Line Of Code: 	HALT   256	| DUMP AND HALT
Line Comment: | DUMP AND HALT
Line Length: 1
Error Count: 0
Errors:
Instruction: HALT
Instruction Type: J
Instruction Binary: 1000
Instruction Hex: 08
Operands: 
	256
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 25
PC: 27
A\R\E: R
Original Line Of Code: E1	outc   4,M2
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Instruction: OUTC
Instruction Type: IO
Instruction Binary: 100
Instruction Hex: 04
Operands: 
	4
	M2
Operand Types: 
	NUMBER
	COMPLEXADDRESS

------------------------------------------
CodeLine 26
PC: 28
A\R\E: R
Original Line Of Code: 	Lw     $1,A1
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Instruction: LW
Instruction Type: S
Instruction Binary: 110000
Instruction Hex: 30
Operands: 
	$1
	A1
Operand Types: 
	REGISTER
	COMPLEXADDRESS

------------------------------------------
CodeLine 27
PC: 28
A\R\E: A
Original Line Of Code: 	JLK    0($1)
Line Comment: 
Line Length: 0
Error Count: 1
Errors:
	99	General Error	Check this line for syntax errors.
------------------------------------------
CodeLine 28
PC: 29
A\R\E: A
Original Line Of Code: 	HALT   0	| HALT normal exit user code 0
Line Comment: | HALT normal exit user code 0
Line Length: 1
Error Count: 0
Errors:
Instruction: HALT
Instruction Type: J
Instruction Binary: 1000
Instruction Hex: 08
Operands: 
	0
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 29
PC: 29
A\R\E: A
Original Line Of Code: | CONSTANTS AND TEMPORARIES
Line Comment: | CONSTANTS AND TEMPORARIES
Line Length: 0
Error Count: 0
Errors:
------------------------------------------
CodeLine 30
PC: 29
A\R\E: A
Original Line Of Code: .data
Line Comment: 
Line Length: 0
Error Count: 0
Errors:
Directive Name: .DATA
Directive Label: NOLABEL
Directive Code Location: DATA
Operands: 
Operand Types: 

------------------------------------------
CodeLine 31
PC: 30
A\R\E: E
Original Line Of Code: A1  adr.data  DQ	| ADDRESS OF DQ.
Line Comment: | ADDRESS OF DQ.
Line Length: 1
Error Count: 0
Errors:
Directive Name: ADR.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	DQ
Operand Types: 
	LABEL

------------------------------------------
CodeLine 32
PC: 31
A\R\E: R
Original Line Of Code: A2  adr.data  XX	| ADDRESS of XX.
Line Comment: | ADDRESS of XX.
Line Length: 1
Error Count: 0
Errors:
Directive Name: ADR.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	XX
Operand Types: 
	LABEL

------------------------------------------
CodeLine 33
PC: 32
A\R\E: A
Original Line Of Code: C4  int.data  4
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Directive Name: INT.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	4
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 34
PC: 34
A\R\E: A
Original Line Of Code: ME  str.data 'Y IS 0' | MESSAGE IS:		Y IS 0
Line Comment: | MESSAGE IS:		Y IS 0
Line Length: 2
Error Count: 1
Errors:
	19	The operand 0: 'Y IS 0' did not match the operand type CHARSTR.	Change Operand
Directive Name: STR.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	'Y IS 0'
Operand Types: 
	CHARSTR

------------------------------------------
CodeLine 35
PC: 35
A\R\E: A
Original Line Of Code: M1  str.data ' Q=' 	| MESSAGE IS:		Q=
Line Comment: | MESSAGE IS:		Q=
Line Length: 1
Error Count: 1
Errors:
	19	The operand 0: ' Q=' did not match the operand type CHARSTR.	Change Operand
Directive Name: STR.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	' Q='
Operand Types: 
	CHARSTR

------------------------------------------
CodeLine 36
PC: 39
A\R\E: A
Original Line Of Code: M2  str.data 'END of Program'
Line Comment: 
Line Length: 4
Error Count: 1
Errors:
	19	The operand 0: 'END of Program' did not match the operand type CHARSTR.	Change Operand
Directive Name: STR.DATA
Directive Label: OPTIONALLABEL
Directive Code Location: DATA
Operands: 
	'END of Program'
Operand Types: 
	CHARSTR

------------------------------------------
CodeLine 37
PC: 43
A\R\E: A
Original Line Of Code: QQ  mem.SKIP 4
Line Comment: 
Line Length: 4
Error Count: 0
Errors:
Directive Name: MEM.SKIP
Directive Label: OPTIONALLABEL
Directive Code Location: TEXT
Operands: 
	4
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 38
PC: 44
A\R\E: A
Original Line Of Code: Q1  mem.SKIP 1
Line Comment: 
Line Length: 1
Error Count: 0
Errors:
Directive Name: MEM.SKIP
Directive Label: OPTIONALLABEL
Directive Code Location: TEXT
Operands: 
	1
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 39
PC: 48
A\R\E: A
Original Line Of Code: XX  mem.SKIP 4
Line Comment: 
Line Length: 4
Error Count: 0
Errors:
Directive Name: MEM.SKIP
Directive Label: OPTIONALLABEL
Directive Code Location: TEXT
Operands: 
	4
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 40
PC: 52
A\R\E: A
Original Line Of Code: YY  mem.SKIP 4
Line Comment: 
Line Length: 4
Error Count: 0
Errors:
Directive Name: MEM.SKIP
Directive Label: OPTIONALLABEL
Directive Code Location: TEXT
Operands: 
	4
Operand Types: 
	NUMBER

------------------------------------------
CodeLine 41
PC: 52
A\R\E: A
Original Line Of Code: .END,altest01
Line Comment: 
Line Length: 0
Error Count: 0
Errors:
Directive Name: .END
Directive Label: NOLABEL
Directive Code Location: TEXT
Operands: 
Operand Types: 

